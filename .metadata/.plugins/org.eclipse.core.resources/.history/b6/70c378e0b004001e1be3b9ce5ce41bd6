package com.adventour.springboot.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.adventour.springboot.exception.ResourceNotFoundException;
import com.adventour.springboot.model.AdventourModel;
import com.adventour.springboot.repository.AdventourRepository;

@RestController
@CrossOrigin
@RequestMapping("/api/v1/")
public class AdventourController {

	
	@Autowired
	private AdventourRepository adventourRepository;
	
	@GetMapping("/tours")
	public List<AdventourModel> getAllTours(){
		return adventourRepository.findAll();
	}
	
	
	@PostMapping("/tours")
	public AdventourModel createTour(@RequestBody AdventourModel adventourTour) {
		return adventourRepository.save(adventourTour);
	}
	
	
	@GetMapping("/tours/{id}")
	public  ResponseEntity<AdventourModel> getTourById(@PathVariable long id) throws ResourceNotFoundException{
		AdventourModel tourID = adventourRepository.findById(id)
				.orElseThrow(()-> new ResourceNotFoundException("Not Found")); 
	return ResponseEntity.ok(tourID);
	}
	
	@PutMapping("/tours/{id}")
	public ResponseEntity<AdventourModel> updateTours(@PathVariable Long id,@RequestBody AdventourModel tours) throws ResourceNotFoundException{
		AdventourModel tourID = adventourRepository.findById(id)
				.orElseThrow(()-> new ResourceNotFoundException("Not Found")); 
		
		tourID.setState(tours.getState());
		tourID.setStateImg(tours.getStateImg());
		tourID.setTourTitle(tours.getTourTitle());
		tourID.setTourImg(tours.getTourImg());
		tourID.setCities(tours.getCities());
		tourID.setPeriods(tours.getPeriods());
		tourID.setCost(tours.getCost());
		tourID.setCityImg(tours.getCityImg());
		tourID.setOverview(tours.getOverview());
		tourID.setTripHighlights(tours.getTripHighlights());
		tourID.setTourRoutes(tours.getTourRoutes());
		
		AdventourModel updatedTours =  adventourRepository.save(tourID);
	       
		return ResponseEntity.ok(updatedTours);
	}
	
	@DeleteMapping("/tours/{id}")
	public ResponseEntity<Map<String,Boolean>> deleteTourPackage(@PathVariable Long id) throws ResourceNotFoundException
	{
		AdventourModel tourID = adventourRepository.findById(id)
				.orElseThrow(()-> new ResourceNotFoundException("Not Found")); 
		
		adventourRepository.delete(tourID);
		
		Map<String,Boolean> response = new HashMap<>();
		 response.put("Deleted", Boolean.TRUE);
		 
		 return ResponseEntity.ok(response);
		
	}
	
	
	
	
	
	
}
